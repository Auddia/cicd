name: '[Template] GCP Function Deployment'

on:
  workflow_call:
    inputs:
      gcp_project:
        description: 'The GCP project name'
        type: string
        required: true
      service_account:
        description: 'The GCP service account to run the function under'
        type: string
        required: true
      function_name:
        description: 'The name of the GCP function'
        type: string
        required: true
      entry_point:
        description: 'The function entry point'
        type: string
        required: true
      runtime:
        description: 'The GCP function runtime'
        type: string
        required: false
        default: 'python37'
      gcp_secrets:
        description: 'Secrets from GCP that you want available in the docker container'
        type: string
        required: false
        default: ''
      environment_variables:
        description: 'List of environment variables to pass to set in the function'
        type: string
        required: false
        default: ''
      function_dir:
        description: 'Location of the directory containing the GCP function code'
        type: string
        required: false
        default: '.'
      extra_function_args:
        description: 'Extra args to pass to the GCP function deploy command'
        type: string
        required: false
        default: ''
      private_repos:
        description: 'A comma seperated list of private repos (private git repos or local python packages)'
        type: string
        required: false
        default: ''
      python_version:
        description: 'Python Version Number for installing the private repos'
        type: string
        required: false
        default: 3.8
      enable_ssh:
        description: 'A flag to allow users to toggle on ssh configuration'
        type: boolean
        required: false
        default: false
    secrets:
      gcp_credentials:
        description: 'A github secret containing the json api key from google for the desired service account that will be issuing the commands from the `gcloud` cli.'
        required: true
      ssh_private_key:
        description: 'A github secret containing a private SSH key'
        required: false

jobs:
  function_deployment:
    name: 'GCP Function Deployment'
    runs-on: ubuntu-latest
    steps:
      - name: 'Setup GCloud SDK'
        id: gcp
        uses: Auddia/cicd/actions/setup_gcloud@v1.2
        with:
          gcp_credentials: ${{ secrets.gcp_credentials }}
          gcp_secrets: ${{ inputs.gcp_secrets }}

      - name: 'Setup SSH'
        uses: webfactory/ssh-agent@v0.4.1
        if: ${{ inputs.enable_ssh }}
        with:
          ssh-private-key: ${{ secrets.ssh_private_key }}

      - name: 'Install Python Version'
        if: ${{ inputs.private_repos }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ inputs.python_version }}

      - name: 'Install private dependencies'
        if: ${{ inputs.private_repos }}
        shell: bash
        run: |
          echo "${{ inputs.private_repos }}" | xargs -I % -d , pip install -t ${{ inputs.function_dir }}/packages %

      - name: 'Parse ENV variables'
        id: deploy_config
        shell: bash
        run: |
          environment_variables="${{ inputs.environment_variables }}"
          if [ -n "$environment_variables" ];
          then
            value=$(echo "$environment_variables" | tr ':' '=' | tr -d [:space:])
          else
            value="DUMMY=0"
          fi

          secret_args="${{ steps.gcp.outputs.secrets }}"
          if [ "${{ steps.gcp.outputs.has_secrets }}" == true ];
          then
            additional_args=$(echo "$secret_args" | grep ":" | tr ':' '=' | tr -d "[\"]" | tr -d [:space:])
            echo "env_vars=${value},${additional_args}" >> "$GITHUB_ENV"
          else
            echo "env_vars=${value}" >> "$GITHUB_ENV"
          fi

      - name: 'GCP Function Deployment'
        shell: bash
        run: |
          cd ${{ inputs.function_dir }}

          gcloud beta functions deploy ${{ inputs.function_name }} \
            ${{ inputs.extra_function_args }} \
            --runtime ${{ inputs.runtime }} \
            --service-account ${{ inputs.service_account }} \
            --entry-point ${{ inputs.entry_point }} \
            --update-env-vars '${{ env.env_vars }}'
